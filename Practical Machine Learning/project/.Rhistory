0.3 * 0.75
0.3 * 0.75 / (0.3 * 0.75 + 0.7 * 0.48)
?sd
?rnorm
rnorm(1000, 10)
plot(rnorm(1000, 10))
hist(rnorm(1000, 10))
hist(rnorm(2000, 10))
hist(rnorm(5000, 10))
hist(rnorm(100000, 10))
nosim <- 1000
n <-10
m <- matrix(rnorm(nosim*n),nosim)
m
hist(m)
dist <- apply(m, 1, mean)
hist(dist)
sd(dist)
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(father.son);
x <- father.son$height
n<-length(x)
hist(x)
head(x)
str(x)
head(father.son)
x <- father.son$sheight
n<-length(x)
head(x)
hist(x)
library(ggplot2)
ggplot(df, aes(x=x)) +  geom_histogram(aes(y=..density..), binwidth=.5,
colour="black", fill="white") + geom_density(alpha=.2, fill="#FF6666")
ggplot(df, aes(x=x)) +  geom_histogram(aes(y=..density..), binwidth=.5, colour="black", fill="white") + geom_density(alpha=.2, fill="#FF6666")
head(x)
qnorm(.95, mean = 0, sd = 1)
?pnorm
pnorm(1160, mean=1020, sd = (140/2.8))
1-pnorm(1160, mean=1020, sd = (140/2.8))
library(UsingR)
data(father.son)
x<- father.son$sheight
head(x)
mean(x)
mean(x) + c(-1,1) * qnorm(.95) * sd(x) / sqrt(length(x))
mean(x) + c(-1,1) * qnorm(.975) * sd(x) / sqrt(length(x))
mean(x) + qnorm(c(0.025, 0.975)) * sd(x) / sqrt(length(x))
x<- father.son$fheight
mean(x) + qnorm(c(0.025, 0.975)) * sd(x) / sqrt(length(x))
mean(x) + c(-1,1) * qnorm(.975) * sd(x) / sqrt(length(x))
x <- 600
poisson.test(x, T=60)
poisson.test(x, T=60)$conf
x<-600
T= 60
mean(x) + c(-1,1) * qnorm(.975) * sd(x) / sqrt(legnth(x))
mean(x) + c(-1,1) * qnorm(.975) * sd(x) / sqrt(length(x))
l <- x/T
mean(l)
l + c(-1,1) * qnorm(.975) * sqrt(l/T)
1100 + 1.96*7.5
0.5^5
0.5^5 * 5
0.5^5 * 5 + 0.5^5
?pbin
=pnorm
?pnorm
?pnorm
pnorm(.5, 0.5, sd = 1/12/1000)
?ppois
poisson.test(5, T=3)$conf
ppois(10,5)
1- ppois(10,5)
1- dpois(10,5)
dpois(10,5)
rpois(10,5)
qpois(10,5)
qpois(10,5)
ppois(10,15)
ppois(10, lambda=5)
ppois(10, lambda=15)
1100 + 1.645*75
1100 + 1.645*7.5
?regexp
?rexp
data(sleep)
head(sleep)
nrow(sleep)
sleeÃ¨
sleep
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
g2 - g1
mean(g2 - g1)
sd(g2 - g1)
mn <- mean(g2 - g1)
s <- sd(g2 - g1)
n<-10
mn + c(-1,1) * qt(.975, n-1) * s 7 sqrt(n)
mn + c(-1,1) * qt(.975, n-1) * s / sqrt(n)
t.test(g2-g1)
t.test(g2, g1, paired=T)
library(datasets)
library(reshape2)
data(chickWeight)
data(ChickWeight)
head(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
head(wideCW)
?mtcars
data(mtcars)
x <- mtcars$am
y <- mtcars$mpg
lm(y ~ x)
plot(x,y)
print(c (mean(x), mean(y))
)
print(c (mean(x), mean(y)))
print(c (mean(mtcars[mtcars$x == 0, ]), mean(mtcars[mtcars$x == 1, ])))
print(c (mean(mtcars[mtcars$x == 0]$mpg), mean(mtcars[mtcars$x == 1]$mpg)))
mtcars[mtcars$x == 0]$mpg
str(mtcars)
print(c (mean(mtcars[mtcars$am == 0]$mpg), mean(mtcars[mtcars$am == 1]$mpg)))
print(c (mean(mtcars[mtcars$am == 0, 1]), mean(mtcars[mtcars$am == 1,1])))
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission", data = mtcars)
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
require(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
result <- t.test(mpg ~ am)
result$p.value
result$estimate
result <- t.test(mpg ~ am, data=mtcars)
result$p.value
result$estimate
transm <- t.test(mpg ~ am, data = mtcars)
transm
transm$p-value
transm$p.value
boxplot(mpg ~ am, data = mtcars, xlab="Transmission type", ylab="MPG")
data(mtcars)
str(mtcars)
fit <- lm(mpg ~ cyl + wt)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(fit)
?lm
summary(lm(mpg ~ cyl + wt, data = mtcars))$coef
summary(lm(mpg ~ as.factor(cyl) + wt, data = mtcars))$coef
str(mtcars)
mtc <- mtcars
mtc$cyl <- as.factor(mtc$cyl)
summary(lm(mpg ~ cyl + wt, data = mtcars))$coef
summary(lm(mpg ~ cyl, data = mtcars))$coef
summary(lm(mpg ~ cyl + wt, data = mtc))$coef
-1.5078 * 4
data(mtcars)
str(mtcars)
summary(lm(mpg ~ as.factor(cyl) + wt, data=mtcars))$coef
summary(lm(mpg ~ as.factor(cyl) + wt, data=mtcars))$coef[3,1]
summary(lm(mpg ~ as.factor(cyl) + wt, data=mtcars))
summary(lm(mpg ~ as.factor(cyl) , data=mtcars))
summary(lm(mpg ~ as.factor(cyl) , data=mtcars))$coef
summary(lm(mpg ~ as.factor(cyl) + wt, data=mtcars))$coef
str(mtcars)
?mtcars
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt + as.factor(cyl):wt, data=mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
fit2 <- lm(mpg ~ as.factor(cyl) + wt + as.factor(cyl):wt, data=mtcars)
summary(fit)
summary(fit2)
anova(fit, fit2, "chi")
anova(fit, fit2, test="Chi")
data(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)$coef[3]
fit2 <- lm(mpg ~ as.factor(cyl), data=mtcars)
summary(fit2)$coef[3] # -11.56364
summary(fit)$coef[3] # -6.07086
?mtcars
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
?abline()
plot(x,y)
abline(lm(y~x))
summary(lm(y~x))
-0.1067 + 0.1289*11.72
(-0.1067 + 0.1289*11.72) - 1.344
?influence.measures
?hatvalues()
?influence.measures
hatvalues(lm(y~x))
hatvalues(lm(y~x))[5]
max(hatvalues(lm(y~x))[5])
max(hatvalues(lm(y~x)))
dfbeta(lm(y~x))
dfbetas(lm(y~x))
dfbetas(lm(y~x))[5]
dfbetas(lm(y~x))[5,2]
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))$coef
library(mass)
library("mass")
library(MASS)
?shuttle
head(shuttle)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
fit <- glm(newUse ~ as.factor(wind) - 1, data=shuttle, family="binomial")
summary(fit)
odds <- exp(summary(fit)$coef)
odds[1] / odds[2] # 0.9686888
fit2 <- glm(newUse ~ as.factor(wind) + as.factor(magn) - 1, data=shuttle, family="binomial")
odds <- exp(cbind(OddsRatio = coef(fit2), confint(fit2)))
odds[1] / odds[2] # 0.9684981
odds[1] / odds[2]
data(InsectSprays)
data(InsectSprays)
fit <- glm(count ~ spray - 1, data=InsectSprays, family="poisson")
summary(fit)$coef
rate <- exp(coef(fit))
rate[1] / rate[2]
data(kernlab)
library(kernlab)
install.packages("kernlab")
data(kernlab)
?kernlab
??kernlab
library(kernlab)
data(spam)
head(Spam)
head(spam)
str(spam)
table(spam$type)
prediction <- ifelse(spam$your > 0.5, "spam", "non-spam")
table(prediction)
table(prediction, spam$type) / length(prediction)
tb <- table(prediction, spam$type) / length(prediction)
accuracy <- tb[1,1] + tb[2,2]
accuracy
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("brglm")
install.packages("caret")
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
head(adData)
str(adData)
head(diagnosis)
head(predictors)
str(predictors)
str(adData)
View(predictors)
View(adData)
data(spam)
library(kernlab)
data(spam)
str(spam)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
histogram(concrete$Superplasticizer)
table(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
str(training)
View(training)
adData$predictors
View(adData)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(predi)
str(predictors)
head(training)
str(training)
xxx <- training[,grep("^[IL]", names(training))]
head(xx)
head(xxx)
xxx <- training[,grep("^IL", names(training))]
head(xxx)
xxx <- preProcess(training, method = "pca")
str(xxx)
xxx <- training[,grep("^IL", names(training))]
x <- preProcess(xxx, method = "pca")
head(x)
summary(x)
prcomp(xxx)
plot(prComp$IL11[,1], prComp$IL_11[,2])
str(prComp)
pp <- prcomp(xxx)
str(pp)
plot(pp$x[,1], pp$x[,2])
str(xxx)
pp <- preProcess(xxx, method="pca", pcaComp=2)
str(pp)
plot(pp$x[,1], pp$x[,2])
qplot(Superplasticizer, data=training) # OR
ggplot(data=training, aes(x=Superplasticizer)) + geom_histogram() + theme_bw()
IL <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(IL, method='pca', thresh=0.9, outcome=training$diagnosis)
str(preProc)
preProc$rotation
pp
?preProcess
preProc <- preProcess(IL, method='pca', thresh=0.8)
str(preProc)
head(preProc)
preProc$rotation
IL <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(IL, method='pca', thresh=0.8)
preProc$rotation
preProc <- preProcess(IL, method='pca', thresh=0.8, outcome=training$diagnosis)
preProc$rotation
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
str(training)
training[,2]
head(training)
training[,1]
IL <- training[,c( grep('^IL', x = names(training) ), 1) ]
head(IL)
?predict
modelFit <- train(diagnosis ~ ., data=IL, method = "glm")
install.packages('e1071', dependencies=TRUE)
modelFit <- train(diagnosis ~ ., data=IL, method = "glm")
summary(modelFit)
modelFit
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(diagnosis, ILpredictors)
modelFit <- train(diagnosis ~ ., data=df, method = "glm")
modelFit
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(dataframe$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
dataframe <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(dataframe$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
modelFit
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
C1
print(C1)
NONPCA <- C1$overall[1]
NONPCA
IL <- training[,c( grep('^IL', x = names(training) ), 1) ]
modelFit <- train(diagnosis ~ ., data=IL, method = "glm")
modelFit
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
dataframe <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(dataframe$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
NONPCA <- C1$overall[1]
NONPCA # Non-PCA Accuracy: 0.65
predict(modelFit, newdata=testing)
pp <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(pp, testing$diagnosis)
C1$overall[1]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- training[,c( grep('^IL', x = names(training) ), 1) ]
modelFit <- train(diagnosis ~ ., data=IL, method = "glm")
pp <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(pp, testing$diagnosis)
C1$overall[1]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
table(segmentationOriginal$Case)
head(segmentationOriginal)
set.seed(125)
training = segmentationOriginal[segmentationOriginal$Case == "Train",]
testing = segmentationOriginal[segmentationOriginal$Case == "Test",]
modFit <- train(Class ~ ., method="rpart", data=training)
modelFit
modFit
testing[testing$TotalIntench2  == 23000, ]
testing[testing$TotalIntench2  == "23,000", ]
x <- c(TotalIntench2 = 23000, FiberWidthCh1 = 10 PerimStatusCh1=2 )
x <- c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
x
predict(modFit, newdata = x)
x <- c(TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100)
x <- c(TotalIntench2 = 50,000, FiberWidthCh1 = 10,VarIntenCh4 = 100)
predict(modFit, newdata = x)
modFit$finalModel
plot(cartModel$finalModel, uniform=T)
plot(modFit$finalModel, uniform=T)
library(pgmm)
data(olive)
olive = olive[,-1]
setwd("workspace/datasciencecoursera/Practical Machine Learning/")
load("C:/Users/Giuliano/Development/Git/workspace/datasciencecoursera/Practical Machine Learning/olive_data/olive.rda")
data(olive)
head(oliev)
head(olive)
modFit <- train(Area  ~ ., method="rpart", data=olive))
modFit <- train(Area  ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
setwd("C:\\Users\\Giuliano\\Development\\Git\\workspace\\datasciencecoursera\\Practical Machine Learning\\project")
library(caret)
training <- read.csv("pml-training.csv", header = T)
testing <- read.csv("pml-testing.csv", header = T)
trSimple <- training[,c(2,5, 160 )]
trSimple <- unique(trSimple)
?qplot
qplot(roll_dumbbell, data = training, color = classe)
qplot(roll_forearm, data = training, color = classe)
qplot(pitch_forearm, data = training, color = classe)
qplot(total_accel_belt, data = training, color = classe)
qplot(total_accel_arm, data = training, color = classe)
qplot(total_accel_forearm, data = training, color = classe)
qplot(total_accel_dumbbell, data = training, color = classe)
qplot(kurtosis_roll_belt, data = training, color = classe)
qplot(as.numeric(kurtosis_roll_belt), data = training, color = classe)
?qplot
qplot(as.numeric(kurtosis_roll_belt), data = training, facets = classe)
qplot(total_accel_dumbbell, data = training, facets = classe)
qplot(amplitude_yaw_belt, data = training, color = classe)
qplot(yaw_arm, data = training, color = classe)
tS <- training[1:1000,]
model <- train(classe ~ ., data=tS, method = "rpart"))
model <- train(classe ~ ., data=tS, method = "rpart")
head(tS)
str(tS)
model <- train(classe ~ ., data=tS, method = "rpart")
model <- train(classe ~ ., data=tS, method = "rf")
model <- train(classe ~ ., data=tS, method = "glm")
head(testing)
str(testing)
table(training$cvtd_timestamp, training$classe)
qplot(cvtd_timestamp, data = training, color = classe)
qplot(cvtd_timestamp, data = training, color = classe, facets =user_name)
